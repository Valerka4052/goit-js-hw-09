{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAeC,SAASC,cAAc,UACtCC,EAAaF,SAASC,cAAc,uBACpCE,EAAYH,SAASC,cAAc,sBACnCG,EAASJ,SAASC,cAAc,wBAEtCF,EAAaM,iBAAiB,SAE9B,SAA+BC,GAC7BA,EAAMC,iBACN,IAAIC,EAAOC,SAASP,EAAWQ,OAC3BC,EAAOF,SAASN,EAAUO,OAC1BE,EAAUH,SAASL,EAAOM,OAC1BG,EAAW,EACf,MAAMC,EAAUC,aAAY,KAkB9B,IAAuBC,EAAUC,GAAVD,EAjBJH,EAiBcI,EAjBJT,EAkBpB,IAAIU,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACaC,KAAKC,SAAW,GAEpCJ,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,KAzBNO,MAAK,EAACR,SAAEA,EAAQC,MAAEA,MACjBQ,QAAQC,IAAI,uBAAqBV,QAAiBC,OAClDU,EAAA9B,GAAS+B,OAAOC,QAAQ,uBAAqBb,QAAiBC,MAAU,IAEzEa,OAAM,EAACd,SAAEA,EAAQC,MAAEA,MAClBQ,QAAQC,IAAI,sBAAoBV,QAAiBC,OACjDU,EAAA9B,GAAS+B,OAAOG,QAAQ,sBAAoBf,QAAeC,MAAU,IAEzEJ,GAAU,EACVL,GAAQG,EACJE,IAAaD,EAAQ,GACvBoB,cAAclB,EAAS,GAExBN,E","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst submitButton = document.querySelector('button');\nconst firstDelay = document.querySelector('input[name=\"delay\"]');\nconst delayStep = document.querySelector('input[name=\"step\"]');\nconst amount = document.querySelector('input[name=\"amount\"]');\n\nsubmitButton.addEventListener('click', makePromiseWithDelay);\n\nfunction makePromiseWithDelay (event) {\n  event.preventDefault();\n  let data = parseInt(firstDelay.value);\n  let step = parseInt(delayStep.value);\n  let counter = parseInt(amount.value);\n  let position = 1;\n  const interval= setInterval(() => {\n     createPromise(position, data)\n      .then(({ position, delay }) => {\n        console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n        Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n    position+=1\n    data += step;\n    if (position === counter+1) {\n      clearInterval(interval)\n    };\n  }, data);\n};\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      };\n    }, delay);\n  });\n};\n\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$submitButton","document","querySelector","$47d4ff9957288465$var$firstDelay","$47d4ff9957288465$var$delayStep","$47d4ff9957288465$var$amount","addEventListener","event","preventDefault","data","parseInt","value","step","counter","position1","interval","setInterval","position","delay","Promise","resolve","reject","setTimeout","Math","random","then","console","log","$parcel$interopDefault","Notify","success","catch","failure","clearInterval"],"version":3,"file":"03-promises.41260754.js.map"}