{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAeC,SAASC,cAAc,UACtCC,EAAaF,SAASC,cAAc,uBACpCE,EAAYH,SAASC,cAAc,sBACnCG,EAASJ,SAASC,cAAc,wBAEtCF,EAAaM,iBAAiB,SAE9B,SAA+BC,GAC7BA,EAAMC,iBACN,IAAIC,EAAOC,SAASP,EAAWQ,OAC3BC,EAAOF,SAASN,EAAUO,OAC1BE,EAAUH,SAASL,EAAOM,OAC1BG,EAAW,EACTC,EAAUC,aAAY,WAkB9B,IAAuBC,EAAUC,GAAVD,EAjBJH,EAiBcI,EAjBJT,EAkBpB,IAAIU,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACaC,KAAKC,SAAW,GAEpCJ,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,KAzBAO,MAAK,SAAAC,G,IAAGT,EAAQS,EAART,SAAUC,EAAKQ,EAALR,MACjBS,QAAQC,IAAI,uBAAwCC,OAAfZ,EAAS,QAAYY,OAANX,EAAM,OAC1DY,EAAAhC,GAASiC,OAAOC,QAAQ,uBAAwCH,OAAfZ,EAAS,QAAYY,OAANX,EAAM,M,IAEvEe,OAAM,SAAAP,G,IAAGT,EAAQS,EAART,SAAUC,EAAKQ,EAALR,MAClBS,QAAQC,IAAI,sBAAuCC,OAAfZ,EAAS,QAAYY,OAANX,EAAM,OACzDY,EAAAhC,GAASiC,OAAOG,QAAQ,sBAAqCL,OAAfZ,EAAS,QAAYY,OAANX,EAAM,M,IAGvET,GAAQG,GADRE,GAAU,KAEOD,EAAQ,GACvBsB,cAAcpB,E,GAEfN,E","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst submitButton = document.querySelector('button');\nconst firstDelay = document.querySelector('input[name=\"delay\"]');\nconst delayStep = document.querySelector('input[name=\"step\"]');\nconst amount = document.querySelector('input[name=\"amount\"]');\n\nsubmitButton.addEventListener('click', makePromiseWithDelay);\n\nfunction makePromiseWithDelay (event) {\n  event.preventDefault();\n  let data = parseInt(firstDelay.value);\n  let step = parseInt(delayStep.value);\n  let counter = parseInt(amount.value);\n  let position = 1;\n  const interval= setInterval(() => {\n     createPromise(position, data)\n      .then(({ position, delay }) => {\n        console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n        Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n    position+=1\n    data += step;\n    if (position === counter+1) {\n      clearInterval(interval)\n    };\n  }, data);\n};\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      };\n    }, delay);\n  });\n};\n\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$submitButton","document","querySelector","$ce04d3a99e08e73b$var$firstDelay","$ce04d3a99e08e73b$var$delayStep","$ce04d3a99e08e73b$var$amount","addEventListener","event","preventDefault","data","parseInt","value","step","counter","position1","interval","setInterval","position","delay","Promise","resolve","reject","setTimeout","Math","random","then","param","console","log","concat","$parcel$interopDefault","Notify","success","catch","failure","clearInterval"],"version":3,"file":"03-promises.864153d5.js.map"}