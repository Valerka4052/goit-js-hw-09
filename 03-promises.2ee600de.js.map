{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAeC,SAASC,cAAc,UACtCC,EAAaF,SAASC,cAAc,uBACpCE,EAAYH,SAASC,cAAc,sBACnCG,EAASJ,SAASC,cAAc,wBAuBtC,SAASI,EAAcC,EAAUC,GAC/B,OAAOC,QAAU,IAAIC,SAAQ,SAACC,EAASC,GACrCC,YAAW,WACaC,KAAKC,SAAW,GAEpCJ,EAAQ,CAAEJ,WAAUC,UAEpBI,EAAO,CAAEL,WAAUC,S,GAEpBA,E,IA9BPR,EAAagB,iBAAiB,SAE9B,SAA+BC,GAC7BA,EAAMC,iBAIN,IAHA,IAAIC,EAAOC,SAASjB,EAAWkB,OAC3BC,EAAOF,SAAShB,EAAUiB,OAC1BE,EAAUH,SAASf,EAAOgB,OACrBG,EAAW,EAAGA,GAAYD,EAASC,GAAY,EACtDlB,EAAckB,EAAUL,GACrBM,MAAK,SAAAC,G,IAAGnB,EAAQmB,EAARnB,SAAUC,EAAKkB,EAALlB,MACjBmB,QAAQC,IAAI,uBAAwCC,OAAftB,EAAS,QAAYsB,OAANrB,EAAM,OAC1DsB,EAAAhC,GAASiC,OAAOC,QAAQ,uBAAwCH,OAAftB,EAAS,QAAYsB,OAANrB,EAAM,M,IAEvEyB,OAAM,SAAAP,G,IAAGnB,EAAQmB,EAARnB,SAAUC,EAAKkB,EAALlB,MAClBmB,QAAQC,IAAI,sBAAuCC,OAAftB,EAAS,QAAYsB,OAANrB,EAAM,OACzDsB,EAAAhC,GAASiC,OAAOG,QAAQ,sBAAqCL,OAAftB,EAAS,QAAYsB,OAANrB,EAAM,M,IAEvEW,GAAQG,C","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst submitButton = document.querySelector('button');\nconst firstDelay = document.querySelector('input[name=\"delay\"]');\nconst delayStep = document.querySelector('input[name=\"step\"]');\nconst amount = document.querySelector('input[name=\"amount\"]');\n\nsubmitButton.addEventListener('click', makePromiseWithDelay);\n\nfunction makePromiseWithDelay (event) {\n  event.preventDefault();\n  let data = parseInt(firstDelay.value);\n  let step = parseInt(delayStep.value);\n  let counter = parseInt(amount.value);\n  for (let position = 1; position <= counter; position += 1) {\n    createPromise(position, data)\n      .then(({ position, delay }) => {\n        console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n        Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n    data += step;\n  };\n};\n\nfunction createPromise(position, delay) {\n  return promise = new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      };\n    }, delay);\n  });\n};\n\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$submitButton","document","querySelector","$ce04d3a99e08e73b$var$firstDelay","$ce04d3a99e08e73b$var$delayStep","$ce04d3a99e08e73b$var$amount","$ce04d3a99e08e73b$var$createPromise","position","delay","promise","Promise","resolve","reject","setTimeout","Math","random","addEventListener","event","preventDefault","data","parseInt","value","step","counter","position1","then","param","console","log","concat","$parcel$interopDefault","Notify","success","catch","failure"],"version":3,"file":"03-promises.2ee600de.js.map"}