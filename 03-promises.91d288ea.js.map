{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAeC,SAASC,cAAc,UACtCC,EAAaF,SAASC,cAAc,uBACpCE,EAAYH,SAASC,cAAc,sBACnCG,EAASJ,SAASC,cAAc,wBAuBtC,SAASI,EAAcC,EAAUC,GAC/B,MAAMC,EAAU,IAAIC,SAAQ,CAACC,EAASC,KACpCC,YAAW,KACaC,KAAKC,SAAW,GAEpCJ,EAAQ,C,SAAEJ,E,MAAUC,IAEpBI,EAAO,C,SAAEL,E,MAAUC,IAEdC,IACND,EAAM,G,CA/BbR,EAAagB,iBAAiB,SAE9B,SAA+BC,GAC7BA,EAAMC,iBACN,IAAIC,EAAOC,SAASjB,EAAWkB,OAC3BC,EAAOF,SAAShB,EAAUiB,OAC1BE,EAAUH,SAASf,EAAOgB,OAC9B,IAAK,IAAIG,EAAW,EAAGA,GAAYD,EAASC,GAAY,EACtDlB,EAAckB,EAAUL,GACrBM,MAAK,EAAClB,SAAEA,EAAQC,MAAEA,MACjBkB,QAAQC,IAAI,uBAAqBpB,QAAiBC,OAClDoB,EAAA9B,GAAS+B,OAAOC,QAAQ,uBAAqBvB,QAAiBC,MAAU,IAEzEuB,OAAM,EAACxB,SAAEA,EAAQC,MAAEA,MAClBkB,QAAQC,IAAI,sBAAoBpB,QAAiBC,OACjDoB,EAAA9B,GAAS+B,OAAOG,QAAQ,sBAAoBzB,QAAeC,MAAU,IAEzEW,GAAQG,C","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst submitButton = document.querySelector('button');\nconst firstDelay = document.querySelector('input[name=\"delay\"]');\nconst delayStep = document.querySelector('input[name=\"step\"]');\nconst amount = document.querySelector('input[name=\"amount\"]');\n\nsubmitButton.addEventListener('click', makePromiseWithDelay);\n\nfunction makePromiseWithDelay (event) {\n  event.preventDefault();\n  let data = parseInt(firstDelay.value);\n  let step = parseInt(delayStep.value);\n  let counter = parseInt(amount.value);\n  for (let position = 1; position <= counter; position += 1) {\n    createPromise(position, data)\n      .then(({ position, delay }) => {\n        console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n        Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n    data += step;\n  };\n};\n\nfunction createPromise(position, delay) {\n  const promise = new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      };\n      return promise;\n    }, delay);\n  });\n};\n\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$submitButton","document","querySelector","$47d4ff9957288465$var$firstDelay","$47d4ff9957288465$var$delayStep","$47d4ff9957288465$var$amount","$47d4ff9957288465$var$createPromise","position","delay","promise","Promise","resolve","reject","setTimeout","Math","random","addEventListener","event","preventDefault","data","parseInt","value","step","counter","position1","then","console","log","$parcel$interopDefault","Notify","success","catch","failure"],"version":3,"file":"03-promises.91d288ea.js.map"}